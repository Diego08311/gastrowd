@*

*@
@{
}
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Zona Social</title>
    <link href="~/css/zonasocial.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <style>
        .body {
            font-family: Arial, sans-serif;
            background-color: #f5f5f5;
        }

        .container {
            display: flex;
            justify-content: space-between;
            max-width: 1200px;
            margin: auto;
            padding: 20px;
        }

        .main-content {
            flex: 2; /* Ocupa más espacio */
            background: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }

        .sidebar {
            flex: 1;
            display: flex;
            flex-direction: column;
            gap: 20px;
        }

        .publish, .chefs {
            background: white;
            padding: 15px;
            border-radius: 10px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }
        

        /* Botones */
        .botones {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
            border-radius: 6px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s;
            padding: 0.5rem 1rem;
            font-size: 0.875rem;
        }

        .btn-sm {
            padding: 0.375rem 0.75rem;
            font-size: 0.8125rem;
        }

        .boton-primary {
            background-color: #0066cc;
            color: white;
            border: 1px solid #0066cc;
        }

            .btn-primary:hover {
                background-color: #0055b3;
            }

        .btn-outline {
            background-color: transparent;
            border: 1px solid #ddd;
            color: #555;
        }

            .btn-outline:hover {
                background-color: #f9f9f9;
            }

        .btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }
        .fondo{
            background-color:#DEDEDE;
        }
    </style>
</head>
<div class="fondo">
    <div class="contene pyy-8">
        <div class="flex flexx-col gap-6">
            <div class="flex flexx-col gap-2">
                <h1 class="text-3xl font-bold tracking-tight">Zona Social</h1>
                <p class="text-muted-foreground">
                    Conecta con otros amantes de la gastronomía y comparte tus experiencias culinarias.
                </p>
            </div>

            <div class="grid gap-6 md:grid-cols-3">
                <div class="md:col-span-2">
                    <div class="social-tabs">
                        <button class="social-tab active" data-tab="feed">Social</button>
                    </div>

                    <div class="social-tab-content active" id="feed-tab">
                        <!-- Las publicaciones se cargarán aquí mediante JavaScript -->
                    </div>
                </div>

                <div class="social-sidebar">
                    <div class="sidebar-card">
                        <h3 class="sidebar-title">Publicar</h3>
                        <form id="post-form" class="post-form">
                            <div class="post-form-header">
                                <img src="https://via.placeholder.com/40?text=TU" alt="Tu avatar" class="user-avatar">
                                <textarea placeholder="Comparte tu experiencia culinaria..." id="post-content" required></textarea>
                            </div>
                            <div id="image-preview" class="image-preview">
                                <div class="image-preview-container">
                                    <img id="preview-img" src="" alt="Vista previa">
                                </div>
                            </div>
                            <div class="post-form-actions">
                                <button type="button" class="btn btn-outline btn-sm" id="add-image-btn">
                                    <i class="fas fa-image"></i> Añadir imagen
                                </button>
                                <button type="submit" class="boton boton-primary btn-sm" id="publish-btn">Publicar</button>
                            </div>
                            <input type="file" id="image-input" accept="image/*" style="display: none;">
                        </form>
                    </div>


                    <div class="sidebar-card">
                        <h3 class="sidebar-title">Tendencias en el Repositorio</h3>
                        <div class="trending-topics">
                            <div class="trend-item">
                                <a href="#" class="trend-tag">#CocinaVegana</a>
                                <span class="trend-count"></span>
                            </div>

                            <div class="trend-item">
                                <a href="#" class="trend-tag">#RecetasSaludables</a>
                                <span class="trend-count"></span>
                            </div>

                            <div class="trend-item">
                                <a href="#" class="trend-tag">#PostresCaseros</a>
                                <span class="trend-count"></span>
                            </div>

                            <div class="trend-item">
                                <a href="#" class="trend-tag">#CocinaTipica</a>
                                <span class="trend-count"></span>
                            </div>

                            <div class="trend-item">
                                <a href="#" class="trend-tag">#GastronomíaLocal</a>
                                <span class="trend-count"></span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal para comentarios -->
    <div class="modal-overlay" id="comments-modal">
        <div class="modal">
            <div class="modal-header">
                <h3 class="modal-title">Comentarios</h3>
                <button class="modal-close" id="close-comments-modal">&times;</button>
            </div>
            <div class="modal-body" id="comments-container">
                <!-- Los comentarios se cargarán aquí -->
            </div>
            <div class="modal-foot">
                <form id="comment-form" class="comment-form">
                    <input type="hidden" id="comment-post-id">
                    <input type="text" class="comment-input" id="comment-input" placeholder="Escribe un comentario..." required>
                    <button type="submit" class="btn btn-primary btn-sm">Enviar</button>
                </form>
            </div>
        </div>
    </div>

    <!-- Contenedor para las notificaciones toast -->
    <div id="toast-container"></div>

    <script>
                      // Store posts in local storage
        let posts = JSON.parse(localStorage.getItem('socialPosts')) || [];

        document.addEventListener('DOMContentLoaded', function() {
            // Initialize the UI
            initializeTabs();
            initializePostForm();
            initializePostActions();
            initializeFollowButtons();
            loadPosts();

            // Set up image preview functionality
            setupImageUpload();
        });

        // Tab functionality
        function initializeTabs() {
            const tabs = document.querySelectorAll('.social-tab');
            const tabContents = document.querySelectorAll('.social-tab-content');

            tabs.forEach(tab => {
                tab.addEventListener('click', function() {
                    const tabName = this.getAttribute('data-tab');

                    // Remove active class from all tabs and contents
                    tabs.forEach(t => t.classList.remove('active'));
                    tabContents.forEach(c => c.classList.remove('active'));

                    // Add active class to current tab and content
                    this.classList.add('active');
                    document.getElementById(tabName + '-tab').classList.add('active');
                });
            });
        }

        // Post form submission
        function initializePostForm() {
            const postForm = document.getElementById('post-form');
            const postContent = document.getElementById('post-content');
            const publishBtn = document.getElementById('publish-btn');

            if (postForm) {
                postForm.addEventListener('submit', function(e) {
                    e.preventDefault();

                    if (!postContent.value.trim()) {
                        showToast('Por favor, escribe algo para publicar.');
                        return;
                    }

                    // Disable button and show loading state
                    publishBtn.disabled = true;
                    publishBtn.innerHTML = 'Publicando...';

                    // Get the image if available
                    const imageInput = document.getElementById('image-upload');
                    let imageUrl = '';

                    // If there's an image, convert it to a data URL
                    if (imageInput && imageInput.files.length > 0) {
                        const reader = new FileReader();
                        reader.onload = function(event) {
                            imageUrl = event.target.result;
                            createPost(postContent.value, imageUrl);

                            // Reset form
                            postContent.value = '';
                            imageInput.value = '';
                            document.getElementById('image-preview').innerHTML = '';
                            publishBtn.disabled = false;
                            publishBtn.innerHTML = 'Publicar';
                        };
                        reader.readAsDataURL(imageInput.files[0]);
                    } else {
                        // No image, create post directly
                        createPost(postContent.value, '');

                        // Reset form
                        postContent.value = '';
                        publishBtn.disabled = false;
                        publishBtn.innerHTML = 'Publicar';
                    }
                });
            }
        }

        // Create a new post
        function createPost(content, imageUrl) {
            const newPost = {
                id: Date.now().toString(),
                author: {
                    name: 'Usuario Local',
                    username: 'usuario_local',
                    avatarUrl: 'https://via.placeholder.com/40?text=TU'
                },
                content: content,
                imageUrl: imageUrl,
                timeAgo: 'Ahora mismo',
                likes: 0,
                comments: 0,
                liked: false,
                disliked: false,
                commentsList: []
            };

            // Add to our posts array
            posts.unshift(newPost);

            // Save to localStorage
            localStorage.setItem('socialPosts', JSON.stringify(posts));

            // Refresh the feed
            loadPosts();

            // Show success message
            showToast('Tu publicación ha sido compartida con éxito.');
        }

        // Load posts from localStorage
        function loadPosts() {
            const feedTab = document.getElementById('feed-tab');

            if (posts.length === 0) {
                // If no posts, show default content
                return;
            }

            // Clear current content
            feedTab.innerHTML = '';

            // Add each post to the feed
            posts.forEach(post => {
                const postElement = createPostElement(post);
                feedTab.appendChild(postElement);
            });

            // Re-initialize post actions after adding new posts
            initializePostActions();
        }

        // Create a post element from post data
        function createPostElement(post) {
            const postDiv = document.createElement('div');
            postDiv.className = 'social-card';
            postDiv.innerHTML = `
                <div class="social-card-header">
                    <div class="user-info">
                        <img src="${post.author.avatarUrl}" alt="${post.author.username}" class="user-avatar">
                        <div>
                            <p class="user-name">${post.author.name}</p>
                            <p class="post-time">${post.timeAgo}</p>
                        </div>
                    </div>
                    <button class="post-options-btn" data-post-id="${post.id}">
                        <i class="fas fa-ellipsis-h"></i>
                    </button>
                </div>
                <div class="post-content">
                    <p>${post.content}</p>
                </div>
                ${post.imageUrl ? `
                <div class="post-image">
                    <img src="${post.imageUrl}" alt="Imagen de la publicación">
                </div>
                ` : ''}
                <div class="post-actions">
                    <button class="post-action-btn ${post.liked ? 'liked' : ''}" data-post-id="${post.id}" data-action="like">
                        <i class="fas fa-thumbs-up"></i>
                        <span>${post.likes}</span>
                    </button>
                    <button class="post-action-btn ${post.disliked ? 'disliked' : ''}" data-post-id="${post.id}" data-action="dislike">
                        <i class="fas fa-thumbs-down"></i>
                    </button>
                    <button class="post-action-btn comment-btn" data-post-id="${post.id}" data-action="comment">
                        <i class="fas fa-comment"></i>
                        <span>${post.comments}</span>
                    </button>
                    <button class="post-action-btn save-btn" data-post-id="${post.id}" data-action="save">
                        <i class="fas fa-bookmark"></i>
                        <span>Guardar</span>
                    </button>
                </div>
                <div class="comments-section" id="comments-${post.id}" style="display: none;">
                    <div class="comments-list">
                        ${post.commentsList.map(comment => `
                            <div class="comment-item">
                                <img src="https://via.placeholder.com/30?text=U" class="user-avatar-small">
                                <div class="comment-content">
                                    <p class="comment-author">Usuario</p>
                                    <p class="comment-text">${comment}</p>
                                </div>
                            </div>
                        `).join('')}
                    </div>
                    <div class="comment-form">
                        <input type="text" class="comment-input" placeholder="Escribe un comentario...">
                        <button class="comment-submit" data-post-id="${post.id}">Enviar</button>
                    </div>
                </div>
            `;

            return postDiv;
        }

        // Initialize post actions
        function initializePostActions() {
            const postActionBtns = document.querySelectorAll('.post-action-btn');

            postActionBtns.forEach(btn => {
                btn.addEventListener('click', function() {
                    const postId = this.getAttribute('data-post-id');
                    const action = this.getAttribute('data-action');

                    // Get the post from our array
                    const postIndex = posts.findIndex(p => p.id === postId);
                    if (postIndex === -1) return;

                    const post = posts[postIndex];

                    // Handle different actions
                    switch (action) {
                        case 'like':
                            handleLike(post, postIndex, this);
                            break;

                        case 'dislike':
                            handleDislike(post, postIndex, this);
                            break;

                        case 'comment':
                            handleComment(postId);
                            break;

                        case 'share':
                            showToast('Función de compartir en desarrollo.');
                            break;

                        case 'save':
                            this.classList.toggle('saved');
                            showToast('Esta publicación ha sido guardada en tu colección.');
                            break;
                    }
                });
            });

            // Add event listeners for comment submission
            const commentSubmitBtns = document.querySelectorAll('.comment-submit');
            commentSubmitBtns.forEach(btn => {
                btn.addEventListener('click', function() {
                    const postId = this.getAttribute('data-post-id');
                    const commentInput = this.previousElementSibling;
                    if (commentInput.value.trim()) {
                        addComment(postId, commentInput.value);
                        commentInput.value = '';
                    }
                });
            });

            // Add event listeners for post options
            const optionsBtns = document.querySelectorAll('.post-options-btn');
            optionsBtns.forEach(btn => {
                btn.addEventListener('click', function() {
                    const postId = this.getAttribute('data-post-id');
                    if (confirm('¿Deseas eliminar esta publicación?')) {
                        deletePost(postId);
                    }
                });
            });
        }

        // Handle like action
        function handleLike(post, postIndex, button) {
            if (post.liked) {
                // Unlike
                post.liked = false;
                post.likes--;
            } else {
                // Like
                post.liked = true;
                post.likes++;

                // Remove dislike if present
                if (post.disliked) {
                    post.disliked = false;
                    const dislikeBtn = document.querySelector(`.post-action-btn[data-post-id="${post.id}"][data-action="dislike"]`);
                    if (dislikeBtn) {
                        dislikeBtn.classList.remove('disliked');
                    }
                }
            }

            // Update post in array
            posts[postIndex] = post;
            localStorage.setItem('socialPosts', JSON.stringify(posts));

            // Update UI
            button.classList.toggle('liked');
            const countSpan = button.querySelector('span');
            if (countSpan) {
                countSpan.textContent = post.likes.toString();
            }

            if (post.liked) {
                showToast('Has indicado que te gusta esta publicación.');
            }
        }

        // Handle dislike action
        function handleDislike(post, postIndex, button) {
            post.disliked = !post.disliked;

            if (post.disliked) {
                // Remove like if present
                if (post.liked) {
                    post.liked = false;
                    post.likes--;

                    const likeBtn = document.querySelector(`.post-action-btn[data-post-id="${post.id}"][data-action="like"]`);
                    if (likeBtn) {
                        likeBtn.classList.remove('liked');
                        const countSpan = likeBtn.querySelector('span');
                        if (countSpan) {
                            countSpan.textContent = post.likes.toString();
                        }
                    }
                }

                showToast('Has indicado que no te gusta esta publicación.');
            }

            // Update post in array
            posts[postIndex] = post;
            localStorage.setItem('socialPosts', JSON.stringify(posts));

            // Update UI
            button.classList.toggle('disliked');
        }

        // Handle comment action
        function handleComment(postId) {
            const commentsSection = document.getElementById(`comments-${postId}`);
            if (commentsSection) {
                if (commentsSection.style.display === 'none') {
                    commentsSection.style.display = 'block';
                } else {
                    commentsSection.style.display = 'none';
                }
            }
        }

        // Add a comment to a post
        function addComment(postId, commentText) {
            const postIndex = posts.findIndex(p => p.id === postId);
            if (postIndex === -1) return;

            const post = posts[postIndex];

            // Add comment
            post.commentsList.push(commentText);
            post.comments++;

            // Update post in array
            posts[postIndex] = post;
            localStorage.setItem('socialPosts', JSON.stringify(posts));

            // Refresh the posts to show updated comments
            loadPosts();

            // Make sure comment section is visible after refresh
            setTimeout(() => {
                const commentsSection = document.getElementById(`comments-${postId}`);
                if (commentsSection) {
                    commentsSection.style.display = 'block';
                }
            }, 100);

            showToast('Tu comentario ha sido publicado.');
        }

        // Delete a post
        function deletePost(postId) {
            posts = posts.filter(p => p.id !== postId);
            localStorage.setItem('socialPosts', JSON.stringify(posts));
            loadPosts();
            showToast('La publicación ha sido eliminada.');
        }

        // Initialize follow buttons
        function initializeFollowButtons() {
            const followBtns = document.querySelectorAll('.follow-btn');

            followBtns.forEach(btn => {
                btn.addEventListener('click', function() {
                    this.classList.toggle('following');

                    if (this.classList.contains('following')) {
                        this.textContent = 'Siguiendo';
                        showToast('Ahora estás siguiendo a este chef.');
                    } else {
                        this.textContent = 'Seguir';
                        showToast('Has dejado de seguir a este chef.');
                    }
                });
            });
        }

        // Set up image upload functionality
        function setupImageUpload() {
            const addImageBtn = document.getElementById('add-image-btn');

            if (addImageBtn) {
                // Create a hidden file input
                const imageInput = document.createElement('input');
                imageInput.type = 'file';
                imageInput.accept = 'image/*';
                imageInput.id = 'image-upload';
                imageInput.style.display = 'none';
                document.body.appendChild(imageInput);

                // Create image preview area
                const previewDiv = document.createElement('div');
                previewDiv.id = 'image-preview';
                previewDiv.className = 'image-preview';
                const postFormActions = document.querySelector('.post-form-actions');
                postFormActions.parentNode.insertBefore(previewDiv, postFormActions);

                // Add click event to the button
                addImageBtn.addEventListener('click', function() {
                    imageInput.click();
                });

                // Handle file selection
                imageInput.addEventListener('change', function() {
                    if (this.files && this.files[0]) {
                        const reader = new FileReader();

                        reader.onload = function(e) {
                            previewDiv.innerHTML = `
                                <div class="preview-container">
                                    <img src="${e.target.result}" class="preview-img">
                                    <button type="button" class="remove-img-btn">×</button>
                                </div>
                            `;

                            // Add event listener to remove button
                            const removeBtn = previewDiv.querySelector('.remove-img-btn');
                            if (removeBtn) {
                                removeBtn.addEventListener('click', function() {
                                    previewDiv.innerHTML = '';
                                    imageInput.value = '';
                                });
                            }
                        };

                        reader.readAsDataURL(this.files[0]);
                    }
                });
            }
        }

        // Toast notification function
        function showToast(message) {
            // Create toast container if it doesn't exist
            let toastContainer = document.getElementById('toast-container');

            if (!toastContainer) {
                toastContainer = document.createElement('div');
                toastContainer.id = 'toast-container';
                toastContainer.style.position = 'fixed';
                toastContainer.style.bottom = '20px';
                toastContainer.style.right = '20px';
                toastContainer.style.zIndex = '1000';
                document.body.appendChild(toastContainer);
            }

            // Create toast
            const toast = document.createElement('div');
            toast.className = 'toast';
            toast.style.backgroundColor = '#333';
            toast.style.color = 'white';
            toast.style.padding = '12px 20px';
            toast.style.borderRadius = '4px';
            toast.style.marginTop = '10px';
            toast.style.boxShadow = '0 2px 10px rgba(0,0,0,0.2)';
            toast.style.opacity = '0';
            toast.style.transition = 'opacity 0.3s ease';
            toast.textContent = message;

            // Add to container
            toastContainer.appendChild(toast);

            // Show toast
            setTimeout(() => {
                toast.style.opacity = '1';
            }, 10);

            // Hide and remove after 3 seconds
            setTimeout(() => {
                toast.style.opacity = '0';
                setTimeout(() => {
                    toastContainer.removeChild(toast);
                }, 300);
            }, 3000);
        }

        // Expose showToast to window object for global access
        window.showToast = showToast;
        </script>
   </div>
</html>

